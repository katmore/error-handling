parameters:
    indentation: "    " # "spaces" by default, you can also use "  " (2 spaces), "    " (4 spaces) or "  " (tab)
    line_ending: "\n"
services:
    PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer:
        syntax: short
    SlevomatCodingStandard\Sniffs\Variables\UnusedVariableSniff: ~
    SlevomatCodingStandard\Sniffs\Variables\UselessVariableSniff: ~

    # function ($var) use ($unused) { return $var; }    →   function ($var) { return $var; }
    SlevomatCodingStandard\Sniffs\Functions\UnusedInheritedVariablePassedToClosureSniff: ~

    # echo "hi";;   →   echo "hi";
    SlevomatCodingStandard\Sniffs\PHP\UselessSemicolonSniff: ~

    # ((new Class))->call()   →     (new Class)->call()
    SlevomatCodingStandard\Sniffs\PHP\UselessParenthesesSniff: ~

    # detect dead code
    SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff:

    # drop dead use namespaces
    PhpCsFixer\Fixer\Import\NoUnusedImportsFixer:

    # and sort them A → Z
    PhpCsFixer\Fixer\Import\OrderedImportsFixer:

    # $value;;
    PhpCsFixer\Fixer\Semicolon\NoEmptyStatementFixer:

    # final class { ... protected ... }
    PhpCsFixer\Fixer\ClassNotation\ProtectedToPrivateFixer:

    # continue (2);
    PhpCsFixer\Fixer\ControlStructure\NoUnneededControlParenthesesFixer:

    # { echo 'hi'; }
    PhpCsFixer\Fixer\ControlStructure\NoUnneededCurlyBracesFixer:

    # $var = 5; return $var;    →    return $var;
    PhpCsFixer\Fixer\ReturnNotation\ReturnAssignmentFixer:

    # $var = $foo : $foo ? $bar → $var = $foo ?: $bar
    SlevomatCodingStandard\Sniffs\ControlStructures\RequireShortTernaryOperatorSniff:

    # $var = $var + foo → $var += $foo
    SlevomatCodingStandard\Sniffs\Operators\RequireCombinedAssignmentOperatorSniff:
    
    # null|Type   →   Type|null
    SlevomatCodingStandard\Sniffs\TypeHints\NullTypeHintOnLastPositionSniff: ~

    # remove empty spaces in phpdoc
    PhpCsFixer\Fixer\Comment\NoTrailingWhitespaceInCommentFixer:

    # trim 2+ empty lines in PhpDoc to 1
    PhpCsFixer\Fixer\Phpdoc\PhpdocTrimConsecutiveBlankLineSeparationFixer: ~

    # remove empty lines in phpdoc (be careful, can be buggy)
    PhpCsFixer\Fixer\Phpdoc\PhpdocTrimFixer: ~

    # remove empty phpdocs
    Symplify\CodingStandard\Fixer\Commenting\RemoveEmptyDocBlockFixer: ~

    # no empty doc blocks
    PhpCsFixer\Fixer\Phpdoc\NoEmptyPhpdocFixer: ~

    # @return null | @return void
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoEmptyReturnFixer: ~

    # /** docblock */\n\t$code;
    PhpCsFixer\Fixer\Phpdoc\PhpdocIndentFixer: ~

    # /** boolean */
    PhpCsFixer\Fixer\Phpdoc\PhpdocTypesFixer: ~

    # SomeClass { ... /** @return SomeClass */ ... }
    PhpCsFixer\Fixer\Phpdoc\PhpdocReturnSelfReferenceFixer: ~
imports:
    #- { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/clean-code.yaml' }
    #- { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/common/docblock.yaml' }
    - { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/common/phpunit.yaml' }
    - { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/common/strict.yaml' }
    - { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/php71.yaml' }
    - { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/psr12.yaml' }
    